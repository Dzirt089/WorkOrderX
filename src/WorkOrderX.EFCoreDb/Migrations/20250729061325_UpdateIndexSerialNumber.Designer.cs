// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkOrderX.EFCoreDb.DbContexts;

#nullable disable

namespace WorkOrderX.EFCoreDb.Migrations
{
    [DbContext(typeof(WorkOrderDbContext))]
    [Migration("20250729061325_UpdateIndexSerialNumber")]
    partial class UpdateIndexSerialNumber
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.ProcessRequests.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatuses", (string)null);
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.ProcessRequests.ApplicationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationTypes", (string)null);
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.ProcessRequests.EquipmentKind", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("EquipmentKinds", (string)null);
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.ProcessRequests.EquipmentModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentModels", (string)null);
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.ProcessRequests.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes", (string)null);
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.ProcessRequests.Importance", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Importances", (string)null);
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.ProcessRequests.ProcessRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletionAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EquipmentKindId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExecutorEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ImportanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlannedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeBreakdownId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("ApplicationTypeId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerEmployeeId");

                    b.HasIndex("EquipmentKindId");

                    b.HasIndex("EquipmentModelId");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("ExecutorEmployeeId");

                    b.HasIndex("ImportanceId");

                    b.HasIndex("PlannedAt");

                    b.HasIndex("TypeBreakdownId");

                    b.ToTable("ProcessRequests");
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.ProcessRequests.TypeBreakdown", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("TypeBreakdowns", (string)null);
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.Specialized", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializeds", (string)null);
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.WorkplaceEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecializedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SpecializedId");

                    b.ToTable("WorkplaceEmployees");
                });

            modelBuilder.Entity("WorkOrderX.Domain.Models.EventStores.EventStoreEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChangedByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExecutorEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ImportanceId")
                        .HasColumnType("int");

                    b.Property<int>("NewStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OldStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangedByEmployeeId");

                    b.HasIndex("CustomerEmployeeId");

                    b.HasIndex("ExecutorEmployeeId");

                    b.HasIndex("ImportanceId");

                    b.HasIndex("NewStatusId");

                    b.HasIndex("OccurredAt");

                    b.HasIndex("OldStatusId");

                    b.HasIndex("AggregateId", "CustomerEmployeeId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("AggregateId", "CustomerEmployeeId"), new[] { "ExecutorEmployeeId", "OldStatusId", "NewStatusId", "Comment", "OccurredAt", "ImportanceId" });

                    b.ToTable("EventStoreEntries", (string)null);
                });

            modelBuilder.Entity("WorkOrderX.EFCoreDb.Models.AppNumber", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Numbers", (string)null);
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.ProcessRequests.EquipmentKind", b =>
                {
                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.ProcessRequests.ProcessRequest", b =>
                {
                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.ApplicationStatus", "ApplicationStatus")
                        .WithMany()
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.ApplicationType", "ApplicationType")
                        .WithMany()
                        .HasForeignKey("ApplicationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.WorkplaceEmployee", null)
                        .WithMany()
                        .HasForeignKey("CustomerEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.EquipmentKind", "EquipmentKind")
                        .WithMany()
                        .HasForeignKey("EquipmentKindId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.EquipmentModel", "EquipmentModel")
                        .WithMany()
                        .HasForeignKey("EquipmentModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.WorkplaceEmployee", null)
                        .WithMany()
                        .HasForeignKey("ExecutorEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.Importance", "Importance")
                        .WithMany()
                        .HasForeignKey("ImportanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.TypeBreakdown", "TypeBreakdown")
                        .WithMany()
                        .HasForeignKey("TypeBreakdownId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.ApplicationNumber", "ApplicationNumber", b1 =>
                        {
                            b1.Property<Guid>("ProcessRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("ApplicationNumber");

                            b1.HasKey("ProcessRequestId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_ProcessRequests_ApplicationNumber");

                            b1.ToTable("ProcessRequests");

                            b1.WithOwner()
                                .HasForeignKey("ProcessRequestId");
                        });

                    b.OwnsOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.DescriptionMalfunction", "DescriptionMalfunction", b1 =>
                        {
                            b1.Property<Guid>("ProcessRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DescriptionMalfunction");

                            b1.HasKey("ProcessRequestId");

                            b1.ToTable("ProcessRequests");

                            b1.WithOwner()
                                .HasForeignKey("ProcessRequestId");
                        });

                    b.OwnsOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.InternalComment", "InternalComment", b1 =>
                        {
                            b1.Property<Guid>("ProcessRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("InternalComment");

                            b1.HasKey("ProcessRequestId");

                            b1.ToTable("ProcessRequests");

                            b1.WithOwner()
                                .HasForeignKey("ProcessRequestId");
                        });

                    b.OwnsOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.SerialNumber", "SerialNumber", b1 =>
                        {
                            b1.Property<Guid>("ProcessRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("SerialNumber");

                            b1.HasKey("ProcessRequestId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("IX_ProcessRequests_SerialNumber");

                            b1.ToTable("ProcessRequests");

                            b1.WithOwner()
                                .HasForeignKey("ProcessRequestId");
                        });

                    b.Navigation("ApplicationNumber")
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("ApplicationType");

                    b.Navigation("DescriptionMalfunction")
                        .IsRequired();

                    b.Navigation("EquipmentKind");

                    b.Navigation("EquipmentModel");

                    b.Navigation("EquipmentType");

                    b.Navigation("Importance");

                    b.Navigation("InternalComment");

                    b.Navigation("SerialNumber");

                    b.Navigation("TypeBreakdown");
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.ProcessRequests.TypeBreakdown", b =>
                {
                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.WorkplaceEmployee", b =>
                {
                    b.HasOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.Specialized", "Specialized")
                        .WithMany()
                        .HasForeignKey("SpecializedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.Account", "Account", b1 =>
                        {
                            b1.Property<Guid>("WorkplaceEmployeeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("Account");

                            b1.HasKey("WorkplaceEmployeeId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_WorkplaceEmployees_Account");

                            b1.ToTable("WorkplaceEmployees");

                            b1.WithOwner()
                                .HasForeignKey("WorkplaceEmployeeId");
                        });

                    b.OwnsOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.Department", "Department", b1 =>
                        {
                            b1.Property<Guid>("WorkplaceEmployeeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Department");

                            b1.HasKey("WorkplaceEmployeeId");

                            b1.ToTable("WorkplaceEmployees");

                            b1.WithOwner()
                                .HasForeignKey("WorkplaceEmployeeId");
                        });

                    b.OwnsOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("WorkplaceEmployeeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("Email");

                            b1.HasKey("WorkplaceEmployeeId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_WorkplaceEmployee_Email");

                            b1.ToTable("WorkplaceEmployees");

                            b1.WithOwner()
                                .HasForeignKey("WorkplaceEmployeeId");
                        });

                    b.OwnsOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("WorkplaceEmployeeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.HasKey("WorkplaceEmployeeId");

                            b1.ToTable("WorkplaceEmployees");

                            b1.WithOwner()
                                .HasForeignKey("WorkplaceEmployeeId");
                        });

                    b.OwnsOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("WorkplaceEmployeeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Phone");

                            b1.HasKey("WorkplaceEmployeeId");

                            b1.ToTable("WorkplaceEmployees");

                            b1.WithOwner()
                                .HasForeignKey("WorkplaceEmployeeId");
                        });

                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("Department")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Specialized");
                });

            modelBuilder.Entity("WorkOrderX.Domain.Models.EventStores.EventStoreEntry", b =>
                {
                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.ProcessRequest", null)
                        .WithMany()
                        .HasForeignKey("AggregateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.WorkplaceEmployee", null)
                        .WithMany()
                        .HasForeignKey("ChangedByEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.WorkplaceEmployee", null)
                        .WithMany()
                        .HasForeignKey("CustomerEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkOrderX.Domain.AggregationModels.WorkplaceEmployees.WorkplaceEmployee", null)
                        .WithMany()
                        .HasForeignKey("ExecutorEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.Importance", null)
                        .WithMany()
                        .HasForeignKey("ImportanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.ApplicationStatus", null)
                        .WithMany()
                        .HasForeignKey("NewStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkOrderX.Domain.AggregationModels.ProcessRequests.ApplicationStatus", null)
                        .WithMany()
                        .HasForeignKey("OldStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
